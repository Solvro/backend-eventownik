openapi: "3.0.0"
info:
  title: "Eventownik backend"
  version: "0.5.0"
  description: "Eventownik backend API documentation"
components:
  responses:
    Forbidden:
      description: "Access token is missing or invalid"
    Accepted:
      description: "The request was accepted"
    Created:
      description: "The resource has been created"
    NotFound:
      description: "The resource has been created"
    NotAcceptable:
      description: "The resource has been created"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
    BasicAuth:
      type: "http"
      scheme: "basic"
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
  schemas:
    Any:
      description: "Any JSON object not defined as schema"
    Admin:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 681
        firstName:
          type: "string"
          example: "John"
        lastName:
          type: "string"
          example: "Doe"
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        type:
          $ref: '#/components/schemas/"organizer"'
          example: "organizer"
          enum:
            - "organizer"
            - "superadmin"
        active:
          type: "boolean"
          example: true
        permissions:
          type: "array"
          items:
            $ref: "#/components/schemas/Permission"
            example: null
        events:
          type: "array"
          items:
            $ref: "#/components/schemas/Event"
            example: null
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Admin (Model)"
    Attribute:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 127
        name:
          type: "string"
          example: "John Doe"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        eventId:
          type: "number"
          example: 431
        options:
          type: "string"
          example: "Lorem Ipsum"
        type:
          type: "string"
          example: "Lorem Ipsum"
        rootBlockId:
          type: "number"
          example: 758
        showInList:
          type: "boolean"
          example: true
        rootBlock:
          $ref: "#/components/schemas/Block"
          example: null
        event:
          $ref: "#/components/schemas/Event"
          example: null
        forms:
          type: "array"
          items:
            $ref: "#/components/schemas/Form"
            example: null
        participantAttributes:
          type: "array"
          items:
            $ref: "#/components/schemas/Participant"
            example: null
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Attribute (Model)"
    Block:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 432
        name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        parentId:
          type: "number"
          example: 744
        capacity:
          type: "number"
          example: 771
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/Block"
            example: null
        parent:
          $ref: "#/components/schemas/Block"
          example: null
        attribute:
          $ref: "#/components/schemas/Attribute"
          example: null
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Block (Model)"
    Email:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 380
        eventId:
          type: "number"
          example: 776
        name:
          type: "string"
          example: "John Doe"
        content:
          type: "string"
          example: "Lorem Ipsum"
        trigger:
          type: "string"
          example: "Lorem Ipsum"
        triggerValue:
          type: "string"
          example: "Lorem Ipsum"
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        event:
          $ref: "#/components/schemas/Event"
          example: null
        participants:
          type: "array"
          items:
            $ref: "#/components/schemas/Participant"
            example: null
      description: "Email (Model)"
    Event:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 289
        organizerId:
          type: "number"
          example: 137
        name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        endDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        lat:
          type: "number"
          example: 41.705
        long:
          type: "number"
          example: -87.475
        primaryColor:
          type: "string"
          example: "Lorem Ipsum"
        organizer:
          type: "string"
          example: "Lorem Ipsum"
        participantsCount:
          type: "number"
          example: 3
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        photoUrl:
          type: "string"
          example: "Lorem Ipsum"
        admins:
          type: "array"
          items:
            $ref: "#/components/schemas/Admin"
            example: null
        permissions:
          type: "array"
          items:
            $ref: "#/components/schemas/Permission"
            example: null
        participants:
          type: "array"
          items:
            $ref: "#/components/schemas/Participant"
            example: null
        emails:
          type: "array"
          items:
            $ref: "#/components/schemas/Email"
            example: null
        forms:
          type: "array"
          items:
            $ref: "#/components/schemas/Form"
            example: null
        firstForm:
          $ref: "#/components/schemas/Form"
          example: null
        socialMediaLinks:
          type: "array"
          items:
            type: "string"
            example: "Lorem Ipsum"
      description: "Event (Model)"
    Form:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 461
        eventId:
          type: "number"
          example: 555
        isOpen:
          type: "boolean"
          example: true
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        name:
          type: "string"
          example: "John Doe"
        isFirstForm:
          type: "boolean"
          example: true
        slug:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        endDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        event:
          $ref: "#/components/schemas/Event"
          example: null
        attributes:
          type: "array"
          items:
            $ref: "#/components/schemas/Attribute"
            example: null
      description: "Form (Model)"
    Participant:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 483
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        eventId:
          type: "number"
          example: 399
        slug:
          type: "string"
          example: "Lorem Ipsum"
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        event:
          $ref: "#/components/schemas/Event"
          example: null
        attributes:
          type: "array"
          items:
            $ref: "#/components/schemas/Attribute"
            example: null
        emails:
          type: "array"
          items:
            $ref: "#/components/schemas/Email"
            example: null
      description: "Participant (Model)"
    Permission:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 578
        action:
          type: "string"
          example: "Lorem Ipsum"
        subject:
          type: "string"
          example: "Lorem Ipsum"
        admins:
          type: "array"
          items:
            $ref: "#/components/schemas/Admin"
            example: null
      description: "Permission (Model)"
    PaginationMeta:
      type: "object"
      properties:
        total:
          type: "number"
          example: 100
          nullable: false
        page:
          type: "number"
          example: 2
          nullable: false
        perPage:
          type: "number"
          example: 10
          nullable: false
        currentPage:
          type: "number"
          example: 3
          nullable: false
        lastPage:
          type: "number"
          example: 10
          nullable: false
        firstPage:
          type: "number"
          example: 1
          nullable: false
        lastPageUrl:
          type: "string"
          example: "/?page=10"
          nullable: false
        firstPageUrl:
          type: "string"
          example: "/?page=1"
          nullable: false
        nextPageUrl:
          type: "string"
          example: "/?page=6"
          nullable: false
        previousPageUrl:
          type: "string"
          example: "/?page=5"
          nullable: false
    createAdminValidator:
      type: "object"
      properties:
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        type:
          type: "number"
          example: 764
          choices:
            - "organizer"
            - "superadmin"
        active:
          type: "boolean"
          example: true
        permissions:
          type: "array"
          items:
            type: "object"
            properties:
              permissionId:
                type: "number"
                example: 62
                required: true
              eventId:
                type: "number"
                example: 668
                required: true
      example:
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
        password: "Lorem Ipsum"
        email: "Lorem Ipsum"
        type: 764
        active: true
        permissions:
          - permissionId: 62
            eventId: 668
      description: "createAdminValidator (Validator)"
    updateAdminValidator:
      type: "object"
      properties:
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        type:
          type: "number"
          example: 134
          choices:
            - "organizer"
            - "superadmin"
        active:
          type: "boolean"
          example: true
        permissions:
          type: "array"
          items:
            type: "object"
            properties:
              permissionId:
                type: "number"
                example: 36
                required: true
              eventId:
                type: "number"
                example: 424
                required: true
      example:
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
        password: "Lorem Ipsum"
        email: "Lorem Ipsum"
        type: 134
        active: true
        permissions:
          - permissionId: 36
            eventId: 424
      description: "updateAdminValidator (Validator)"
    createAttributeValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        slug:
          type: "string"
          example: "Lorem Ipsum"
        type:
          type: "number"
          example: 537
          choices:
            - "text"
            - "textarea"
            - "number"
            - "file"
            - "select"
            - "block"
            - "date"
            - "time"
            - "datetime"
            - "email"
            - "tel"
            - "color"
            - "checkbox"
          required: true
        options:
          type: "array"
          items:
            type: "number"
            example: 2
            minimum: 2
        rootBlockId:
          type: "number"
          example: 980
        showInList:
          type: "boolean"
          example: true
      example:
        name: "Lorem Ipsum"
        slug: "Lorem Ipsum"
        type: 537
        options:
          - 2
        rootBlockId: 980
        showInList: true
      description: "createAttributeValidator (Validator)"
    updateAttributeValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        type:
          type: "number"
          example: 722
          choices:
            - "text"
            - "textarea"
            - "number"
            - "file"
            - "select"
            - "block"
            - "date"
            - "time"
            - "datetime"
            - "email"
            - "tel"
            - "color"
            - "checkbox"
        options:
          type: "array"
          items:
            type: "number"
            example: 2
            minimum: 2
        rootBlockId:
          type: "number"
          example: 941
        showInList:
          type: "boolean"
          example: true
      example:
        name: "Lorem Ipsum"
        slug: "Lorem Ipsum"
        type: 722
        options:
          - 2
        rootBlockId: 941
        showInList: true
      description: "updateAttributeValidator (Validator)"
    loginValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        rememberMe:
          type: "boolean"
          example: true
      example:
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
        rememberMe: true
      description: "loginValidator (Validator)"
    registerAdminValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          minLength: 8
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
      example:
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
      description: "registerAdminValidator (Validator)"
    createBlockValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        parentId:
          type: "number"
          example: 796
          required: true
        capacity:
          type: "number"
          example: 1
          minimum: 1
          required: true
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        parentId: 796
        capacity: 1
      description: "createBlockValidator (Validator)"
    updateBlockValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        parentId:
          type: "number"
          example: 116
          required: true
        capacity:
          type: "number"
          example: 1
          minimum: 1
          required: true
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        parentId: 116
        capacity: 1
      description: "updateBlockValidator (Validator)"
    emailsStoreValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        content:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        trigger:
          type: "number"
          example: 758
          choices:
            - "participant_registered"
            - "participant_deleted"
            - "form_filled"
            - "attribute_changed"
            - "manual"
          required: true
        triggerValue:
          type: "string"
          example: "Lorem Ipsum"
      example:
        name: "Lorem Ipsum"
        content: "Lorem Ipsum"
        trigger: 758
        triggerValue: "Lorem Ipsum"
      description: "emailsStoreValidator (Validator)"
    emailsUpdateValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
        content:
          type: "string"
          example: "Lorem Ipsum"
        trigger:
          type: "number"
          example: 352
          choices:
            - "participant_registered"
            - "form_filled"
            - "attribute_changed"
        triggerValue:
          type: "string"
          example: "Lorem Ipsum"
      example:
        name: "Lorem Ipsum"
        content: "Lorem Ipsum"
        trigger: 352
        triggerValue: "Lorem Ipsum"
      description: "emailsUpdateValidator (Validator)"
    createEventValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          maxLength: 255
        description:
          type: "string"
          example: "Lorem Ipsum"
        organizer:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        startDate:
          type: "number"
          example: 994
          required: true
        endDate:
          type: "number"
          example: 889
          required: true
        lat:
          type: "number"
          example: 95
        long:
          type: "number"
          example: 826
        primaryColor:
          type: "string"
          example: "Lorem Ipsum"
        participantsCount:
          type: "number"
          example: 180
        photo:
          type: "number"
          example: 391
        socialMediaLinks:
          type: "array"
          items:
            type: "number"
            example: 837
          properties:
            items:
              type: "string"
              example: "Lorem Ipsum"
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        organizer: "Lorem Ipsum"
        slug: "Lorem Ipsum"
        startDate: 994
        endDate: 889
        lat: 95
        long: 826
        primaryColor: "Lorem Ipsum"
        participantsCount: 180
        photo: 391
        socialMediaLinks:
          - "Lorem Ipsum"
      description: "createEventValidator (Validator)"
    updateEventValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          maxLength: 255
        description:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "number"
          example: 974
        endDate:
          type: "number"
          example: 651
        lat:
          type: "number"
          example: 476
        long:
          type: "number"
          example: 107
        primaryColor:
          type: "string"
          example: "Lorem Ipsum"
        participantsCount:
          type: "number"
          example: 82
        organizer:
          type: "string"
          example: "Lorem Ipsum"
        photo:
          type: "number"
          example: 663
        socialMediaLinks:
          type: "array"
          items:
            type: "number"
            example: 351
          properties:
            items:
              type: "string"
              example: "Lorem Ipsum"
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        slug: "Lorem Ipsum"
        startDate: 974
        endDate: 651
        lat: 476
        long: 107
        primaryColor: "Lorem Ipsum"
        participantsCount: 82
        organizer: "Lorem Ipsum"
        photo: 663
        socialMediaLinks:
          - "Lorem Ipsum"
      description: "updateEventValidator (Validator)"
    createFormValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        startDate:
          type: "number"
          example: 801
          required: true
        isFirstForm:
          type: "boolean"
          example: true
          required: true
        attributes:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "number"
                example: 671
                required: true
              isRequired:
                type: "number"
                example: 930
              isEditable:
                type: "number"
                example: 465
          required: true
          properties:
            items:
              isRequired:
                type: "boolean"
                example: true
              isEditable:
                type: "boolean"
                example: true
        endDate:
          type: "number"
          example: 756
        isOpen:
          type: "boolean"
          example: true
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        startDate: 801
        isFirstForm: true
        attributes:
          - id: 671
            isRequired: true
            isEditable: true
        endDate: 756
        isOpen: true
      description: "createFormValidator (Validator)"
    formSubmitValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
        participantSlug:
          type: "string"
          example: "Lorem Ipsum"
        attributes:
          type: "object"
          properties: {}
          required: true
      example:
        email: "Lorem Ipsum"
        participantSlug: "Lorem Ipsum"
        attributes: {}
      description: "formSubmitValidator (Validator)"
    updateFormValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
        description:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "number"
          example: 618
        endDate:
          type: "number"
          example: 738
        attributes:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "number"
                example: 147
                required: true
              isRequired:
                type: "number"
                example: 877
              isEditable:
                type: "number"
                example: 103
          properties:
            items:
              isRequired:
                type: "boolean"
                example: true
              isEditable:
                type: "boolean"
                example: true
        isOpen:
          type: "boolean"
          example: true
        isFirstForm:
          type: "boolean"
          example: true
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        startDate: 618
        endDate: 738
        attributes:
          - id: 147
            isRequired: true
            isEditable: true
        isOpen: true
        isFirstForm: true
      description: "updateFormValidator (Validator)"
    addOrganizerValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        permissionsIds:
          type: "array"
          items:
            type: "number"
            example: 279
          required: true
        firstName:
          type: "string"
          example: "Lorem Ipsum"
        lastName:
          type: "string"
          example: "Lorem Ipsum"
        password:
          type: "string"
          example: "Lorem Ipsum"
      example:
        email: "Lorem Ipsum"
        permissionsIds:
          - 279
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
        password: "Lorem Ipsum"
      description: "addOrganizerValidator (Validator)"
    updateOrganizerPermissionsValidator:
      type: "object"
      properties:
        permissionsIds:
          type: "array"
          items:
            type: "number"
            example: 433
          required: true
      example:
        permissionsIds:
          - 433
      description: "updateOrganizerPermissionsValidator (Validator)"
    participantAttributesStoreValidator:
      type: "object"
      properties:
        participantAttributes:
          type: "array"
          items:
            type: "object"
            properties:
              attributeId:
                type: "number"
                example: 83
                required: true
              value:
                type: "number"
                example: 524
                required: true
          properties:
            items:
              value:
                type: "string"
                example: "Lorem Ipsum"
      example:
        participantAttributes:
          - attributeId: 83
            value: "Lorem Ipsum"
      description: "participantAttributesStoreValidator (Validator)"
    participantAttributesUpdateValidator:
      type: "object"
      properties:
        participantAttributes:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "number"
                example: 572
                required: true
              value:
                type: "number"
                example: 844
                required: true
          properties:
            items:
              value:
                type: "string"
                example: "Lorem Ipsum"
      example:
        participantAttributes:
          - id: 572
            value: "Lorem Ipsum"
      description: "participantAttributesUpdateValidator (Validator)"
    participantsStoreValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        participantAttributes:
          type: "array"
          items:
            type: "object"
            properties:
              attributeId:
                type: "number"
                example: 674
                required: true
              value:
                type: "number"
                example: 725
                required: true
          properties:
            items:
              value:
                type: "string"
                example: "Lorem Ipsum"
      example:
        email: "Lorem Ipsum"
        participantAttributes:
          - attributeId: 674
            value: "Lorem Ipsum"
      description: "participantsStoreValidator (Validator)"
    participantsUpdateValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
        participantAttributes:
          type: "array"
          items:
            type: "object"
            properties:
              attributeId:
                type: "number"
                example: 771
                required: true
              value:
                type: "number"
                example: 776
                required: true
          properties:
            items:
              value:
                type: "string"
                example: "Lorem Ipsum"
      example:
        email: "Lorem Ipsum"
        participantAttributes:
          - attributeId: 771
            value: "Lorem Ipsum"
      description: "participantsUpdateValidator (Validator)"
    createPermissionValidator:
      type: "object"
      properties:
        action:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        subject:
          type: "string"
          example: "Lorem Ipsum"
          required: true
      example:
        action: "Lorem Ipsum"
        subject: "Lorem Ipsum"
      description: "createPermissionValidator (Validator)"
    updatePermissionValidator:
      type: "object"
      properties:
        action:
          type: "string"
          example: "Lorem Ipsum"
        subject:
          type: "string"
          example: "Lorem Ipsum"
      example:
        action: "Lorem Ipsum"
        subject: "Lorem Ipsum"
      description: "updatePermissionValidator (Validator)"
paths:
  /api/v1/events/{eventSlug}:
    get:
      summary: " (publicShow)"
      description: "Shows one event basic data without login\n\n _app/controllers/events_controller.ts_ - **publicShow**"
      operationId: "showPublicEvent"
      parameters:
        - in: "path"
          name: "eventSlug"
          schema:
            type: "string"
          required: true
      tags:
        - "EVENT"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 289
                organizerId: 137
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 3
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
                photoUrl: "Lorem Ipsum"
                forms:
                  - id: 461
                    eventId: 555
                    isOpen: true
                    description: "Lorem ipsum dolor sit amet"
                    name: "John Doe"
                    isFirstForm: true
                    slug: "Lorem Ipsum"
                    startDate: "2021-03-23T16:13:08.489+01:00"
                    endDate: "2021-03-23T16:13:08.489+01:00"
                    createdAt: "2021-03-23T16:13:08.489+01:00"
                    updatedAt: "2021-03-23T16:13:08.489+01:00"
                socialMediaLinks:
                  - "Lorem Ipsum"
          description: "Returns **201** (Created) as **application/json**"
      security: []
  /api/v1/events/{eventSlug}/participants/{participantSlug}:
    get:
      summary: "Get participant (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/public_participants_controller.ts_ - **index**"
      operationId: "getPublicParticipant"
      parameters:
        - in: "path"
          name: "eventSlug"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "participantSlug"
          schema:
            type: "string"
          required: true
      tags:
        - "PUBLIC_PARTICIPANTS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
              example:
                id: 483
                email: "johndoe@example.com"
                eventId: 399
                slug: "Lorem Ipsum"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        401:
          content:
            text/plain:
              example: '{ errors: [{ message: "Unauthorized access" }] }'
          description: "Returns **401** (Unauthorized) as **text/plain**"
      security: []
  /api/v1/admins:
    get:
      summary: "Get a list of admins (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/admins_controller.ts_ - **index**"
      operationId: "getAdmins"
      parameters: []
      tags:
        - "ADMINS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Admin"
              example:
                - id: 681
                  firstName: "John"
                  lastName: "Doe"
                  email: "johndoe@example.com"
                  type: {}
                  active: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: " (store)"
      description: "Creates an admin\n\n _app/controllers/admins_controller.ts_ - **store**"
      operationId: "createAdmin"
      parameters: []
      tags:
        - "ADMINS"
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createAdminValidator"
            example:
              firstName: "Lorem Ipsum"
              lastName: "Lorem Ipsum"
              password: "Lorem Ipsum"
              email: "Lorem Ipsum"
              type: 764
              active: true
              permissions:
                - permissionId: 62
                  eventId: 668
  /api/v1/admins/{id}:
    get:
      summary: "Get a single instance of admins (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/admins_controller.ts_ - **show**"
      operationId: "getAdmin"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ADMINS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
              example:
                id: 681
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                type: {}
                active: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
    put:
      summary: "Update admins (update)"
      description: "Updates admin details\n\n _app/controllers/admins_controller.ts_ - **update**"
      operationId: "updateAdmin"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ADMINS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
              example:
                id: 681
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                type: {}
                active: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
    delete:
      summary: "Delete admins (destroy)"
      description: "Deletes an admin\n\n _app/controllers/admins_controller.ts_ - **destroy**"
      operationId: "deleteAdmin"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ADMINS"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
      security: []
  /api/v1/events:
    get:
      summary: "Get a list of event (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/events_controller.ts_ - **index**"
      operationId: "getEvents"
      parameters: []
      tags:
        - "EVENT"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Event"
              example:
                - id: 289
                  organizerId: 137
                  name: "John Doe"
                  description: "Lorem ipsum dolor sit amet"
                  slug: "Lorem Ipsum"
                  startDate: "2021-03-23T16:13:08.489+01:00"
                  endDate: "2021-03-23T16:13:08.489+01:00"
                  lat: 41.705
                  long: -87.475
                  primaryColor: "Lorem Ipsum"
                  organizer: "Lorem Ipsum"
                  participantsCount: 3
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
                  photoUrl: "Lorem Ipsum"
                  socialMediaLinks:
                    - "Lorem Ipsum"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: " (store)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/events_controller.ts_ - **store**"
      operationId: "createEvent"
      parameters: []
      tags:
        - "EVENT"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 289
                organizerId: 137
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 3
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
                photoUrl: "Lorem Ipsum"
                socialMediaLinks:
                  - "Lorem Ipsum"
          description: "Returns **201** (Created) as **application/json**"
        400:
          content:
            text/plain:
              example: "Invalid input data"
          description: "Returns **400** (Bad Request) as **text/plain**"
        401:
          content:
            text/plain:
              example: "Unauthorized access"
          description: "Returns **401** (Unauthorized) as **text/plain**"
        422:
          content:
            text/plain:
              example: "Validation failed"
          description: "Returns **422** (Unprocessable Entity) as **text/plain**"
        500:
          content:
            text/plain:
              example: '{ message: "Error while processing the file" }'
          description: "Returns **500** (Internal Server Error) as **text/plain**"
      security: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  format: "string"
                description:
                  type: "string"
                  format: "string"
                organizer:
                  type: "string"
                  format: "string"
                slug:
                  type: "string"
                  format: "string"
                startDate:
                  type: "number"
                  format: "string"
                endDate:
                  type: "number"
                  format: "string"
                lat:
                  type: "number"
                  format: "string"
                long:
                  type: "number"
                  format: "string"
                primaryColor:
                  type: "string"
                  format: "string"
                participantsCount:
                  type: "number"
                  format: "string"
                photo:
                  type: "number"
                  format: "string"
                socialMediaLinks:
                  type: "array"
                  format: "string"
              required:
                - "name"
                - "slug"
                - "startDate"
                - "endDate"
  /api/v1/events/{id}:
    get:
      summary: "Get a single instance of event (show)"
      description: "Shows one event with logged user permission\n\n _app/controllers/events_controller.ts_ - **show**"
      operationId: "showEvent"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "EVENT"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 289
                organizerId: 137
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 3
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
                photoUrl: "Lorem Ipsum"
                permissions:
                  - id: 578
                    action: "Lorem Ipsum"
                    subject: "Lorem Ipsum"
                forms:
                  - id: 461
                    eventId: 555
                    isOpen: true
                    description: "Lorem ipsum dolor sit amet"
                    name: "John Doe"
                    isFirstForm: true
                    slug: "Lorem Ipsum"
                    startDate: "2021-03-23T16:13:08.489+01:00"
                    endDate: "2021-03-23T16:13:08.489+01:00"
                    createdAt: "2021-03-23T16:13:08.489+01:00"
                    updatedAt: "2021-03-23T16:13:08.489+01:00"
                socialMediaLinks:
                  - "Lorem Ipsum"
          description: "Returns **201** (Created) as **application/json**"
        401:
          content:
            text/plain:
              example: "Unauthorized access"
          description: "Returns **401** (Unauthorized) as **text/plain**"
      security: []
    put:
      summary: "Update event (update)"
      description: "Updates an existing event if user has permission. Date should be in format 2025-01-05 12:00:00\n\n _app/controllers/events_controller.ts_ - **update**"
      operationId: "updateEvent"
      parameters:
        - in: "path"
          name: "id"
          description: "Event identifier"
          schema:
            example: ""
            type: "number"
          required: true
      tags:
        - "EVENT"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 289
                organizerId: 137
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 3
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
                photoUrl: "Lorem Ipsum"
                socialMediaLinks:
                  - "Lorem Ipsum"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            text/plain:
              example: "Invalid input data"
          description: "Returns **400** (Bad Request) as **text/plain**"
        403:
          content:
            text/plain:
              example: "Not authorized to update this event"
          description: "Returns **403** (Forbidden) as **text/plain**"
        404:
          content:
            text/plain:
              example: "Event not found"
          description: "Returns **404** (Not Found) as **text/plain**"
        422:
          content:
            text/plain:
              example: "Validation failed"
          description: "Returns **422** (Unprocessable Entity) as **text/plain**"
      security: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  format: "string"
                description:
                  type: "string"
                  format: "string"
                slug:
                  type: "string"
                  format: "string"
                startDate:
                  type: "number"
                  format: "string"
                endDate:
                  type: "number"
                  format: "string"
                lat:
                  type: "number"
                  format: "string"
                long:
                  type: "number"
                  format: "string"
                primaryColor:
                  type: "string"
                  format: "string"
                participantsCount:
                  type: "number"
                  format: "string"
                organizer:
                  type: "string"
                  format: "string"
                photo:
                  type: "number"
                  format: "string"
                socialMediaLinks:
                  type: "array"
                  format: "string"
              required: []
    delete:
      summary: "Delete event (destroy)"
      description: "Deletes an event if user has permission\n\n _app/controllers/events_controller.ts_ - **destroy**"
      operationId: "deleteEvent"
      parameters:
        - in: "path"
          name: "id"
          description: "Event identifier"
          schema:
            example: ""
            type: "number"
          required: true
      tags:
        - "EVENT"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
        401:
          content:
            text/plain:
              example: "You don't have permissions to this actions"
          description: "Returns **401** (Unauthorized) as **text/plain**"
        404:
          content:
            text/plain:
              example: "Event not found"
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
  /api/v1/permissions:
    get:
      summary: "Get a list of permissions (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/permissions_controller.ts_ - **index**"
      operationId: "getPermissions"
      parameters: []
      tags:
        - "PERMISSIONS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Permission"
              example:
                - id: 578
                  action: "Lorem Ipsum"
                  subject: "Lorem Ipsum"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: " (store)"
      description: "Creates a permission\n\n _app/controllers/permissions_controller.ts_ - **store**"
      operationId: "createPermission"
      parameters: []
      tags:
        - "PERMISSIONS"
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createPermissionValidator"
            example:
              action: "Lorem Ipsum"
              subject: "Lorem Ipsum"
  /api/v1/permissions/{id}:
    get:
      summary: "Get a single instance of permissions (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/permissions_controller.ts_ - **show**"
      operationId: "getPermission"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "PERMISSIONS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
              example:
                id: 578
                action: "Lorem Ipsum"
                subject: "Lorem Ipsum"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
    put:
      summary: "Update permissions (update)"
      description: "Updates permission\n\n _app/controllers/permissions_controller.ts_ - **update**"
      operationId: "updateAdmin"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "PERMISSIONS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
              example:
                id: 578
                action: "Lorem Ipsum"
                subject: "Lorem Ipsum"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePermissionValidator"
            example:
              action: "Lorem Ipsum"
              subject: "Lorem Ipsum"
    delete:
      summary: "Delete permissions (destroy)"
      description: "Deletes a permission\n\n _app/controllers/permissions_controller.ts_ - **destroy**"
      operationId: "deletePermission"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "PERMISSIONS"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
      security: []
  /api/v1/events/{eventId}/attributes:
    get:
      summary: "Get a list of attributes (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/attributes_controller.ts_ - **index**"
      operationId: "getEventAttributes"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "ATTRIBUTES"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Attribute"
              example:
                - id: 127
                  name: "John Doe"
                  slug: "Lorem Ipsum"
                  eventId: 431
                  options: "Lorem Ipsum"
                  type: "Lorem Ipsum"
                  rootBlockId: 758
                  showInList: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: " (store)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/attributes_controller.ts_ - **store**"
      operationId: "addEventAttribute"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "ATTRIBUTES"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
              example:
                id: 127
                name: "John Doe"
                slug: "Lorem Ipsum"
                eventId: 431
                options: "Lorem Ipsum"
                type: "Lorem Ipsum"
                rootBlockId: 758
                showInList: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **201** (Created) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createAttributeValidator"
            example:
              name: "Lorem Ipsum"
              slug: "Lorem Ipsum"
              type: 537
              options:
                - 2
              rootBlockId: 980
              showInList: true
  /api/v1/events/{eventId}/attributes/{id}:
    get:
      summary: "Get a single instance of attributes (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/attributes_controller.ts_ - **show**"
      operationId: "getEventAttribute"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ATTRIBUTES"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
              example:
                id: 127
                name: "John Doe"
                slug: "Lorem Ipsum"
                eventId: 431
                options: "Lorem Ipsum"
                type: "Lorem Ipsum"
                rootBlockId: 758
                showInList: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
    put:
      summary: "Update attributes (update)"
      description: "Update event attribute details\n\n _app/controllers/attributes_controller.ts_ - **update**"
      operationId: "updateEventAttribute"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ATTRIBUTES"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
              example:
                id: 127
                name: "John Doe"
                slug: "Lorem Ipsum"
                eventId: 431
                options: "Lorem Ipsum"
                type: "Lorem Ipsum"
                rootBlockId: 758
                showInList: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateAttributeValidator"
            example:
              name: "Lorem Ipsum"
              slug: "Lorem Ipsum"
              type: 722
              options:
                - 2
              rootBlockId: 941
              showInList: true
    delete:
      summary: "Delete attributes (destroy)"
      description: "Deletes an attribute of an event\n\n _app/controllers/attributes_controller.ts_ - **destroy**"
      operationId: "deleteEventAttribute"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ATTRIBUTES"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
      security: []
  /api/v1/events/{eventId}/blocks:
    get:
      summary: "Get a list of v1 (index)"
      description: "\n\n _app/controllers/blocks_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
    post:
      summary: " (store)"
      description: "\n\n _app/controllers/blocks_controller.ts_ - **store**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json: {}
  /api/v1/events/{eventId}/blocks/{id}:
    get:
      summary: "Get a single instance of v1 (show)"
      description: "\n\n _app/controllers/blocks_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
    put:
      summary: "Update v1 (update)"
      description: "\n\n _app/controllers/blocks_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        204:
          description: "No Content"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete v1 (destroy)"
      description: "\n\n _app/controllers/blocks_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        202:
          description: "Accepted"
          content:
            application/json: {}
      security: []
  /api/v1/events/{eventId}/emails:
    get:
      summary: "Get a list of emails (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/emails_controller.ts_ - **index**"
      operationId: "listEmails"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "EMAILS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
              example:
                - id: 1
                  eventId: 5
                  name: "test124"
                  trigger: "participant_registered"
                  triggerValue: ""
                  createdAt: "2025-02-22T19:13:10.471+00:00"
                  updatedAt: "2025-02-22T19:13:10.471+00:00"
                  meta:
                    failedCount: "1"
                    pendingCount: "1"
                    sentCount: "0"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: " (store)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/emails_controller.ts_ - **store**"
      operationId: "createEmail"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "EMAILS"
      responses:
        201:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id: 1
                  name: "Email Name"
                  content: "Email Content"
                  trigger: "participant_registered"
              example:
                id: 1
                name: "Email Name"
                content: "Email Content"
                trigger: "participant_registered"
          description: "Returns **201** (Created) as **application/json**"
        400:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Failed to create email"
              example:
                message: "Failed to create email"
          description: "Returns **400** (Bad Request) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/emailsStoreValidator"
            example:
              name: "Lorem Ipsum"
              content: "Lorem Ipsum"
              trigger: 758
              triggerValue: "Lorem Ipsum"
  /api/v1/events/{eventId}/emails/{id}:
    get:
      summary: "Get a single instance of emails (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/emails_controller.ts_ - **show**"
      operationId: "getEmail"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "EMAILS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id: 1
                  eventId: 5
                  name: "test124"
                  content: "uuuu"
                  trigger: "participant_registered"
                  triggerValue: "eeee"
                  createdAt: "2025-02-22T19:13:10.471+00:00"
                  updatedAt: "2025-02-22T19:13:10.471+00:00"
                  participants:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          id: 4
                          email: "dasd"
                          eventId: 5
                          firstName: "fdf"
                          lastName: "fddfd"
                          createdAt: "2025-02-22T19:13:10.471+00:00"
                          updatedAt: "2025-02-22T19:13:10.471+00:00"
                          meta:
                            type: "object"
                            properties:
                              pivot_status: "failed"
                              pivot_email_id: 1
                              pivot_participant_id: 4
                              pivot_send_at: "2025-02-22T19:13:10.471+00:00"
                              pivot_send_by: "2025-02-22T19:13:10.471+00:00"
                      1:
                        type: "object"
                        properties:
                          id: 4
                          email: "dasd"
                          eventId: 5
                          firstName: "fdf"
                          lastName: "fddfd"
                          createdAt: "2025-02-22T19:13:10.471+00:00"
                          updatedAt: "2025-02-22T19:13:10.471+00:00"
                          meta:
                            type: "object"
                            properties:
                              pivot_status: "pending"
                              pivot_email_id: 1
                              pivot_participant_id: 4
                              pivot_send_at: "2025-02-22T19:13:10.471+00:00"
                              pivot_send_by: "2025-02-22T19:13:10.471+00:00"
              example:
                id: 1
                eventId: 5
                name: "test124"
                content: "uuuu"
                trigger: "participant_registered"
                triggerValue: "eeee"
                createdAt: "2025-02-22T19:13:10.471+00:00"
                updatedAt: "2025-02-22T19:13:10.471+00:00"
                participants:
                  - id: 4
                    email: "dasd"
                    eventId: 5
                    firstName: "fdf"
                    lastName: "fddfd"
                    createdAt: "2025-02-22T19:13:10.471+00:00"
                    updatedAt: "2025-02-22T19:13:10.471+00:00"
                    meta:
                      pivot_status: "failed"
                      pivot_email_id: 1
                      pivot_participant_id: 4
                      pivot_send_at: "2025-02-22T19:13:10.471+00:00"
                      pivot_send_by: "2025-02-22T19:13:10.471+00:00"
                  - id: 4
                    email: "dasd"
                    eventId: 5
                    firstName: "fdf"
                    lastName: "fddfd"
                    createdAt: "2025-02-22T19:13:10.471+00:00"
                    updatedAt: "2025-02-22T19:13:10.471+00:00"
                    meta:
                      pivot_status: "pending"
                      pivot_email_id: 1
                      pivot_participant_id: 4
                      pivot_send_at: "2025-02-22T19:13:10.471+00:00"
                      pivot_send_by: "2025-02-22T19:13:10.471+00:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Email not found"
              example:
                message: "Email not found"
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
    put:
      summary: "Update emails (update)"
      description: "Update an existing email associated with a specific event and return the updated email.\n\n _app/controllers/emails_controller.ts_ - **update**"
      operationId: "updateEmail"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "EMAILS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id: 1
                  name: "Updated Name"
                  content: "Updated Content"
                  trigger: "form_filled"
              example:
                id: 1
                name: "Updated Name"
                content: "Updated Content"
                trigger: "form_filled"
          description: "Returns **200** (OK) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/emailsUpdateValidator"
            example:
              name: "Lorem Ipsum"
              content: "Lorem Ipsum"
              trigger: 352
              triggerValue: "Lorem Ipsum"
    delete:
      summary: "Delete emails (destroy)"
      description: "Remove an email associated with a specific event.\n\n _app/controllers/emails_controller.ts_ - **destroy**"
      operationId: "deleteEmail"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "EMAILS"
      responses:
        200:
          content:
            text/plain:
              example: '{ message: "Email successfully deleted" }'
          description: "Returns **200** (OK) as **text/plain**"
      security: []
  /api/v1/events/{eventId}/forms:
    get:
      summary: "Get a list of forms (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/forms_controller.ts_ - **index**"
      operationId: "getForms"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Form"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
              example:
                data:
                  - id: 461
                    eventId: 555
                    isOpen: true
                    description: "Lorem ipsum dolor sit amet"
                    name: "John Doe"
                    isFirstForm: true
                    slug: "Lorem Ipsum"
                    startDate: "2021-03-23T16:13:08.489+01:00"
                    endDate: "2021-03-23T16:13:08.489+01:00"
                    createdAt: "2021-03-23T16:13:08.489+01:00"
                    updatedAt: "2021-03-23T16:13:08.489+01:00"
                    attributes:
                      - id: 127
                        name: "John Doe"
                        slug: "Lorem Ipsum"
                        eventId: 431
                        options: "Lorem Ipsum"
                        type: "Lorem Ipsum"
                        rootBlockId: 758
                        showInList: true
                        createdAt: "2021-03-23T16:13:08.489+01:00"
                        updatedAt: "2021-03-23T16:13:08.489+01:00"
                meta:
                  total: 100
                  page: 2
                  perPage: 10
                  currentPage: 3
                  lastPage: 10
                  firstPage: 1
                  lastPageUrl: "/?page=10"
                  firstPageUrl: "/?page=1"
                  nextPageUrl: "/?page=6"
                  previousPageUrl: "/?page=5"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: "elo zelo (store)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/forms_controller.ts_ - **store**"
      operationId: "createForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
              example:
                id: 461
                eventId: 555
                isOpen: true
                description: "Lorem ipsum dolor sit amet"
                name: "John Doe"
                isFirstForm: true
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **201** (Created) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createFormValidator"
            example:
              name: "Lorem Ipsum"
              description: "Lorem Ipsum"
              startDate: 801
              isFirstForm: true
              attributes:
                - id: 671
                  isRequired: true
                  isEditable: true
              endDate: 756
              isOpen: true
  /api/v1/events/{eventId}/forms/{id}:
    get:
      summary: "Get a single instance of forms (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/forms_controller.ts_ - **show**"
      operationId: "getForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
              example:
                id: 461
                eventId: 555
                isOpen: true
                description: "Lorem ipsum dolor sit amet"
                name: "John Doe"
                isFirstForm: true
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
                attributes:
                  - id: 127
                    name: "John Doe"
                    slug: "Lorem Ipsum"
                    eventId: 431
                    options: "Lorem Ipsum"
                    type: "Lorem Ipsum"
                    rootBlockId: 758
                    showInList: true
                    createdAt: "2021-03-23T16:13:08.489+01:00"
                    updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
    put:
      summary: "Update forms (update)"
      description: "Updates form details\n\n _app/controllers/forms_controller.ts_ - **update**"
      operationId: "updateForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
              example:
                id: 461
                eventId: 555
                isOpen: true
                description: "Lorem ipsum dolor sit amet"
                name: "John Doe"
                isFirstForm: true
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateFormValidator"
            example:
              name: "Lorem Ipsum"
              description: "Lorem Ipsum"
              startDate: 618
              endDate: 738
              attributes:
                - id: 147
                  isRequired: true
                  isEditable: true
              isOpen: true
              isFirstForm: true
    delete:
      summary: "Delete forms (destroy)"
      description: "Deletes a form\n\n _app/controllers/forms_controller.ts_ - **destroy**"
      operationId: "deleteForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
  /api/v1/events/{eventId}/organizers:
    get:
      summary: "Get a list of organizers (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/organizers_controller.ts_ - **index**"
      operationId: "getEventOrganizers"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "ORGANIZERS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Admin"
              example:
                - id: 681
                  firstName: "John"
                  lastName: "Doe"
                  email: "johndoe@example.com"
                  type: {}
                  active: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: " (store)"
      description: "Adds an admin as an event organizer\n\n _app/controllers/organizers_controller.ts_ - **store**"
      operationId: "addEventOrganizer"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "ORGANIZERS"
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addOrganizerValidator"
            example:
              email: "Lorem Ipsum"
              permissionsIds:
                - 279
              firstName: "Lorem Ipsum"
              lastName: "Lorem Ipsum"
              password: "Lorem Ipsum"
  /api/v1/events/{eventId}/organizers/{id}:
    get:
      summary: "Get a single instance of organizers (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/organizers_controller.ts_ - **show**"
      operationId: "getEventOrganizer"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ORGANIZERS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
              example:
                id: 681
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                type: {}
                active: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            text/plain:
              example: "{ error: `Organizer with id {organizerId} does not exist` },"
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
    put:
      summary: "Update organizers (update)"
      description: "Changes organizer's permissions to the ones specified in the request body\n\n _app/controllers/organizers_controller.ts_ - **update**"
      operationId: "updateOrganizerPermissions"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ORGANIZERS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
              example:
                id: 681
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                type: {}
                active: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateOrganizerPermissionsValidator"
            example:
              permissionsIds:
                - 433
    delete:
      summary: "Delete organizers (destroy)"
      description: "Removes organizer\n\n _app/controllers/organizers_controller.ts_ - **destroy**"
      operationId: "removeOrganizer"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ORGANIZERS"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
      security: []
  /api/v1/events/{eventId}/participants/export:
    get:
      summary: "Export participants (handle)"
      description: "Spreadsheet download with xlsx extension\n\n _app/controllers/event_export_controller.ts_ - **handle**"
      operationId: "exportEventSpreadsheet"
      parameters:
        - in: "path"
          name: "eventId"
          description: "ID of the event to be exported"
          schema:
            example: ""
            type: "number"
          required: true
      tags:
        - "V1"
      responses:
        200:
          content:
            text/plain:
              example: "file:xlsx"
          description: "Spreadsheet download with xlsx extension"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
  /api/v1/events/{eventId}/participants/import:
    post:
      summary: "Import participants (handle)"
      description: "Takes given spreadsheet and updates event with :eventId with provided values\n\n _app/controllers/event_import_controller.ts_ - **handle**"
      operationId: "importEventSpreadsheet"
      parameters:
        - in: "path"
          name: "eventId"
          description: "ID of the event to be imported"
          schema:
            example: ""
            type: "number"
          required: true
      tags:
        - "V1"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  eventId:
                    $ref: "#/components/schemas/number"
                  importedParticipants:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Participant"
              example:
                eventId: {}
                importedParticipants:
                  - id: 483
                    email: "johndoe@example.com"
                    eventId: 399
                    slug: "Lorem Ipsum"
                    createdAt: "2021-03-23T16:13:08.489+01:00"
                    updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Bad file provided"
              example:
                errors:
                  - message: "Bad file provided"
          description: "Returns **400** (Bad Request) as **application/json**"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
        500:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Could not process file"
              example:
                errors:
                  - message: "Could not process file"
          description: "Returns **500** (Internal Server Error) as **application/json**"
      security: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                spreadsheet:
                  type: "file:xlsx"
                  format: "binary"
              required: []
  /api/v1/events/{eventId}/participants:
    get:
      summary: "Get all participants (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/participants_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "PARTICIPANTS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
              example:
                - id: 32
                  email: "test@test.pl"
                  slug: "9081d217-9e13-4642-b7f0-2b8f8f409dfb"
                  createdAt: "2025-02-19 13:56:10"
                  updatedAt: "2025-02-19 13:56:10"
                  attributes:
                    - id: 25
                      name: "Sample Attribute"
                      value: "sample value"
                      slug: "sample-slug"
          description: "Returns **200** (OK) as **application/json**"
      security: []
    post:
      summary: "Create a new participant (store)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/participants_controller.ts_ - **store**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "PARTICIPANTS"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
              example:
                id: 483
                email: "johndoe@example.com"
                eventId: 399
                slug: "Lorem Ipsum"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **201** (Created) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/participantsStoreValidator"
            example:
              email: "Lorem Ipsum"
              participantAttributes:
                - attributeId: 674
                  value: "Lorem Ipsum"
  /api/v1/events/{eventId}/participants/{id}:
    get:
      summary: "Get a participant (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/participants_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "PARTICIPANTS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id: 1
                  email: "john.doe@example.com"
                  firstName: "John"
                  lastName: "Doe"
                  slug: "some-unique-slug"
                  createdAt: "2025-02-18T00:56:06.115+01:00"
                  updatedAt: "2025-02-18T00:56:06.115+01:00"
                  emails:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          id: 1
                          name: "Welcome Email"
                          content: "Welcome to our event!"
                          participantEmails:
                            type: "object"
                            properties:
                              status: "sent"
                              sendBy: "admin"
                              sendAt: "2025-02-19T14:43:12.000+01:00"
              example:
                id: 1
                email: "john.doe@example.com"
                firstName: "John"
                lastName: "Doe"
                slug: "some-unique-slug"
                createdAt: "2025-02-18T00:56:06.115+01:00"
                updatedAt: "2025-02-18T00:56:06.115+01:00"
                emails:
                  - id: 1
                    name: "Welcome Email"
                    content: "Welcome to our event!"
                    participantEmails:
                      status: "sent"
                      sendBy: "admin"
                      sendAt: "2025-02-19T14:43:12.000+01:00"
          description: "Returns **200** (OK) as **application/json**"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
    put:
      summary: "Update a participant (update)"
      description: "Update a participant for specific event with optional attributes\n\n _app/controllers/participants_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "PARTICIPANTS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
              example:
                id: 483
                email: "johndoe@example.com"
                eventId: 399
                slug: "Lorem Ipsum"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/participantsUpdateValidator"
            example:
              email: "Lorem Ipsum"
              participantAttributes:
                - attributeId: 771
                  value: "Lorem Ipsum"
    delete:
      summary: "Delete a participant (destroy)"
      description: "Delete a participant for specific event\n\n _app/controllers/participants_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "PARTICIPANTS"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security: []
  /api/v1/events/{eventSlug}/forms/{id}/submit:
    post:
      summary: " (submitForm)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/forms_controller.ts_ - **submitForm**"
      operationId: "submitForm"
      parameters:
        - in: "path"
          name: "eventSlug"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            text/plain:
              example: "{ missingRequiredFields: { id: number, name: string }[] }"
          description: "Returns **200** (OK) as **text/plain**"
        201:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **201** (Created) as **application/json**"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/formSubmitValidator"
            example:
              email: "Lorem Ipsum"
              participantSlug: "Lorem Ipsum"
              attributes: {}
  /api/v1/auth/login:
    post:
      summary: " (login)"
      description: "Enables login. Default method is token authorization. Support rememberMe functionality. If rememberMe is set to true then token expires in 30 days, otherwise in 24h.\n\n _app/controllers/auth_controller.ts_ - **login**"
      operationId: "loginAdmin"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  admin:
                    $ref: "#/components/schemas/Admin"
                  token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
              example:
                admin:
                  id: 681
                  firstName: "John"
                  lastName: "Doe"
                  email: "johndoe@example.com"
                  type: {}
                  active: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
                token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Invalid user credentials"
              example:
                errors:
                  - message: "Invalid user credentials"
          description: "Returns **400** (Bad Request) as **application/json**"
        422:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Password field is required"
                          field: "password"
              example:
                errors:
                  - message: "Password field is required"
                    field: "password"
          description: "Returns **422** (Unprocessable Entity) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginValidator"
            example:
              email: "Lorem Ipsum"
              password: "Lorem Ipsum"
              rememberMe: true
  /api/v1/auth/register:
    post:
      summary: " (register)"
      description: "Enables registration of admin. After registration admin is logged in and bearer token is generated.\n\n _app/controllers/auth_controller.ts_ - **register**"
      operationId: "registerAdmin"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  admin:
                    $ref: "#/components/schemas/Admin"
                  token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
              example:
                admin:
                  id: 681
                  firstName: "John"
                  lastName: "Doe"
                  email: "johndoe@example.com"
                  type: {}
                  active: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
                token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
          description: "Returns **200** (OK) as **application/json**"
        422:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "First name field is required"
                          field: "firstName"
              example:
                errors:
                  - message: "First name field is required"
                    field: "firstName"
          description: "Returns **422** (Unprocessable Entity) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerAdminValidator"
            example:
              email: "Lorem Ipsum"
              password: "Lorem Ipsum"
              firstName: "Lorem Ipsum"
              lastName: "Lorem Ipsum"
  /api/v1/auth/me:
    get:
      summary: " (me)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/auth_controller.ts_ - **me**"
      operationId: "authenticatedAdmin"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
              example:
                id: 681
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                type: {}
                active: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Unauthorized access"
              example:
                errors:
                  - message: "Unauthorized access"
          description: "Returns **400** (Bad Request) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
tags:
  - name: "V1"
    description: "Everything related to V1"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "PUBLIC_PARTICIPANTS"
    description: "Everything related to PUBLIC_PARTICIPANTS"
  - name: "ADMINS"
    description: "Everything related to ADMINS"
  - name: "ADMINS"
    description: "Everything related to ADMINS"
  - name: "ADMINS"
    description: "Everything related to ADMINS"
  - name: "ADMINS"
    description: "Everything related to ADMINS"
  - name: "ADMINS"
    description: "Everything related to ADMINS"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "PERMISSIONS"
    description: "Everything related to PERMISSIONS"
  - name: "PERMISSIONS"
    description: "Everything related to PERMISSIONS"
  - name: "PERMISSIONS"
    description: "Everything related to PERMISSIONS"
  - name: "PERMISSIONS"
    description: "Everything related to PERMISSIONS"
  - name: "PERMISSIONS"
    description: "Everything related to PERMISSIONS"
  - name: "ATTRIBUTES"
    description: "Everything related to ATTRIBUTES"
  - name: "ATTRIBUTES"
    description: "Everything related to ATTRIBUTES"
  - name: "ATTRIBUTES"
    description: "Everything related to ATTRIBUTES"
  - name: "ATTRIBUTES"
    description: "Everything related to ATTRIBUTES"
  - name: "ATTRIBUTES"
    description: "Everything related to ATTRIBUTES"
  - name: "EMAILS"
    description: "Everything related to EMAILS"
  - name: "EMAILS"
    description: "Everything related to EMAILS"
  - name: "EMAILS"
    description: "Everything related to EMAILS"
  - name: "EMAILS"
    description: "Everything related to EMAILS"
  - name: "EMAILS"
    description: "Everything related to EMAILS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "ORGANIZERS"
    description: "Everything related to ORGANIZERS"
  - name: "ORGANIZERS"
    description: "Everything related to ORGANIZERS"
  - name: "ORGANIZERS"
    description: "Everything related to ORGANIZERS"
  - name: "ORGANIZERS"
    description: "Everything related to ORGANIZERS"
  - name: "ORGANIZERS"
    description: "Everything related to ORGANIZERS"
  - name: "PARTICIPANTS"
    description: "Everything related to PARTICIPANTS"
  - name: "PARTICIPANTS"
    description: "Everything related to PARTICIPANTS"
  - name: "PARTICIPANTS"
    description: "Everything related to PARTICIPANTS"
  - name: "PARTICIPANTS"
    description: "Everything related to PARTICIPANTS"
  - name: "PARTICIPANTS"
    description: "Everything related to PARTICIPANTS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "AUTH"
    description: "Everything related to AUTH"
  - name: "AUTH"
    description: "Everything related to AUTH"
  - name: "AUTH"
    description: "Everything related to AUTH"
