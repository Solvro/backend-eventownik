openapi: "3.0.0"
info:
  title: "Eventownik backend"
  version: "0.5.0"
  description: "Eventownik backend API documentation"
components:
  responses:
    Forbidden:
      description: "Access token is missing or invalid"
    Accepted:
      description: "The request was accepted"
    Created:
      description: "The resource has been created"
    NotFound:
      description: "The resource has been created"
    NotAcceptable:
      description: "The resource has been created"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
    BasicAuth:
      type: "http"
      scheme: "basic"
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
  schemas:
    Any:
      description: "Any JSON object not defined as schema"
    Admin:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 973
        firstName:
          type: "string"
          example: "John"
        lastName:
          type: "string"
          example: "Doe"
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        type:
          $ref: '#/components/schemas/"organizer"'
          example: "organizer"
          enum:
            - "organizer"
            - "superadmin"
        active:
          type: "boolean"
          example: true
        permissions:
          type: "array"
          items:
            $ref: "#/components/schemas/Permission"
            example: null
        events:
          type: "array"
          items:
            $ref: "#/components/schemas/Event"
            example: null
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Admin (Model)"
    Block:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 333
        name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        parentId:
          type: "number"
          example: 97
        parent:
          $ref: "#/components/schemas/Block"
          example: null
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/Block"
            example: null
        capacity:
          type: "number"
          example: 353
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Block (Model)"
    Email:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 317
        eventId:
          type: "number"
          example: 602
        name:
          type: "string"
          example: "John Doe"
        content:
          type: "string"
          example: "Lorem Ipsum"
        trigger:
          type: "string"
          example: "Lorem Ipsum"
        triggerValue:
          type: "string"
          example: "Lorem Ipsum"
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        event:
          $ref: "#/components/schemas/Event"
          example: null
        participants:
          type: "array"
          items:
            $ref: "#/components/schemas/Participant"
            example: null
        $extras:
          $ref: "#/components/schemas/"
          example: null
      description: "Email (Model)"
    Event:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 694
        organizerId:
          type: "number"
          example: 748
        name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        endDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        firstFormId:
          type: "number"
          example: 282
        lat:
          type: "number"
          example: 41.705
        long:
          type: "number"
          example: -87.475
        primaryColor:
          type: "string"
          example: "Lorem Ipsum"
        organizer:
          type: "string"
          example: "Lorem Ipsum"
        participantsCount:
          type: "number"
          example: 300
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        admins:
          type: "array"
          items:
            $ref: "#/components/schemas/Admin"
            example: null
        permissions:
          type: "array"
          items:
            $ref: "#/components/schemas/Permission"
            example: null
        participants:
          type: "array"
          items:
            $ref: "#/components/schemas/Participant"
            example: null
        emails:
          type: "array"
          items:
            $ref: "#/components/schemas/Email"
            example: null
      description: "Event (Model)"
    Form:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 578
        eventId:
          type: "number"
          example: 569
        isOpen:
          type: "boolean"
          example: true
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        name:
          type: "string"
          example: "John Doe"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        endDate:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        event:
          $ref: "#/components/schemas/Event"
          example: null
      description: "Form (Model)"
    Participant:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 143
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        eventId:
          type: "number"
          example: 825
        firstName:
          type: "string"
          example: "John"
        lastName:
          type: "string"
          example: "Doe"
        createdAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updatedAt:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        event:
          $ref: "#/components/schemas/Event"
          example: null
        emails:
          type: "array"
          items:
            $ref: "#/components/schemas/Email"
            example: null
      description: "Participant (Model)"
    Permission:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 882
        action:
          type: "string"
          example: "Lorem Ipsum"
        subject:
          type: "string"
          example: "Lorem Ipsum"
        admins:
          type: "array"
          items:
            $ref: "#/components/schemas/Admin"
            example: null
      description: "Permission (Model)"
    PaginationMeta:
      type: "object"
      properties:
        total:
          type: "number"
          example: 100
          nullable: false
        page:
          type: "number"
          example: 2
          nullable: false
        perPage:
          type: "number"
          example: 10
          nullable: false
        currentPage:
          type: "number"
          example: 3
          nullable: false
        lastPage:
          type: "number"
          example: 10
          nullable: false
        firstPage:
          type: "number"
          example: 1
          nullable: false
        lastPageUrl:
          type: "string"
          example: "/?page=10"
          nullable: false
        firstPageUrl:
          type: "string"
          example: "/?page=1"
          nullable: false
        nextPageUrl:
          type: "string"
          example: "/?page=6"
          nullable: false
        previousPageUrl:
          type: "string"
          example: "/?page=5"
          nullable: false
    createAdminValidator:
      type: "object"
      properties:
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        type:
          type: "number"
          example: 370
          choices:
            - "organizer"
            - "superadmin"
        active:
          type: "boolean"
          example: true
        permissions:
          type: "array"
          items:
            type: "object"
            properties:
              permissionId:
                type: "number"
                example: 885
                required: true
              eventId:
                type: "number"
                example: 771
                required: true
      example:
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
        password: "Lorem Ipsum"
        email: "Lorem Ipsum"
        type: 370
        active: true
        permissions:
          - permissionId: 885
            eventId: 771
      description: "createAdminValidator (Validator)"
    updateAdminValidator:
      type: "object"
      properties:
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        type:
          type: "number"
          example: 278
          choices:
            - "organizer"
            - "superadmin"
        active:
          type: "boolean"
          example: true
        permissions:
          type: "array"
          items:
            type: "object"
            properties:
              permissionId:
                type: "number"
                example: 72
                required: true
              eventId:
                type: "number"
                example: 212
                required: true
      example:
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
        password: "Lorem Ipsum"
        email: "Lorem Ipsum"
        type: 278
        active: true
        permissions:
          - permissionId: 72
            eventId: 212
      description: "updateAdminValidator (Validator)"
    loginValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        rememberMe:
          type: "boolean"
          example: true
      example:
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
        rememberMe: true
      description: "loginValidator (Validator)"
    registerAdminValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          minLength: 8
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
      example:
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
      description: "registerAdminValidator (Validator)"
    createBlockValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        parentId:
          type: "number"
          example: 328
          required: true
        capacity:
          type: "number"
          example: 1
          minimum: 1
          required: true
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        parentId: 328
        capacity: 1
      description: "createBlockValidator (Validator)"
    updateBlockValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        parentId:
          type: "number"
          example: 918
          required: true
        capacity:
          type: "number"
          example: 1
          minimum: 1
          required: true
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        parentId: 918
        capacity: 1
      description: "updateBlockValidator (Validator)"
    emailsStoreValidator:
      type: "object"
      properties:
        eventId:
          type: "number"
          example: 787
          required: true
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        content:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        trigger:
          type: "number"
          example: 653
          choices:
            - "participant_registered"
            - "participant_deleted"
            - "form_filled"
            - "attribute_changed"
          required: true
        triggerValue:
          type: "string"
          example: "Lorem Ipsum"
      example:
        eventId: 787
        name: "Lorem Ipsum"
        content: "Lorem Ipsum"
        trigger: 653
        triggerValue: "Lorem Ipsum"
      description: "emailsStoreValidator (Validator)"
    emailsUpdateValidator:
      type: "object"
      properties:
        eventId:
          type: "number"
          example: 749
        name:
          type: "string"
          example: "Lorem Ipsum"
        content:
          type: "string"
          example: "Lorem Ipsum"
        trigger:
          type: "number"
          example: 377
          choices:
            - "participant_registered"
            - "form_filled"
            - "attribute_changed"
        triggerValue:
          type: "string"
          example: "Lorem Ipsum"
      example:
        eventId: 749
        name: "Lorem Ipsum"
        content: "Lorem Ipsum"
        trigger: 377
        triggerValue: "Lorem Ipsum"
      description: "emailsUpdateValidator (Validator)"
    createEventValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          maxLength: 255
        description:
          type: "string"
          example: "Lorem Ipsum"
        organizer:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        startDate:
          type: "number"
          example: 569
          required: true
        endDate:
          type: "number"
          example: 950
          required: true
        firstFormId:
          type: "number"
          example: 680
        lat:
          type: "number"
          example: 812
        long:
          type: "number"
          example: 649
        primaryColor:
          type: "string"
          example: "Lorem Ipsum"
        participantsCount:
          type: "number"
          example: 871
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        organizer: "Lorem Ipsum"
        slug: "Lorem Ipsum"
        startDate: 569
        endDate: 950
        firstFormId: 680
        lat: 812
        long: 649
        primaryColor: "Lorem Ipsum"
        participantsCount: 871
      description: "createEventValidator (Validator)"
    updateEventValidator:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Lorem Ipsum"
          maxLength: 255
        description:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "number"
          example: 646
        endDate:
          type: "number"
          example: 256
        lat:
          type: "number"
          example: 926
        long:
          type: "number"
          example: 434
        primaryColor:
          type: "string"
          example: "Lorem Ipsum"
        participantsCount:
          type: "number"
          example: 954
        organizer:
          type: "string"
          example: "Lorem Ipsum"
      example:
        name: "Lorem Ipsum"
        description: "Lorem Ipsum"
        slug: "Lorem Ipsum"
        startDate: 646
        endDate: 256
        lat: 926
        long: 434
        primaryColor: "Lorem Ipsum"
        participantsCount: 954
        organizer: "Lorem Ipsum"
      description: "updateEventValidator (Validator)"
    createFormValidator:
      type: "object"
      properties:
        isOpen:
          type: "boolean"
          example: true
          required: true
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        name:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        startDate:
          type: "number"
          example: 858
          required: true
        endDate:
          type: "number"
          example: 793
        attributeIds:
          type: "array"
          items:
            type: "number"
            example: 991
      example:
        isOpen: true
        description: "Lorem Ipsum"
        name: "Lorem Ipsum"
        startDate: 858
        endDate: 793
        attributeIds:
          - 991
      description: "createFormValidator (Validator)"
    updateFormValidator:
      type: "object"
      properties:
        isOpen:
          type: "boolean"
          example: true
        description:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "Lorem Ipsum"
        startDate:
          type: "number"
          example: 902
        endDate:
          type: "number"
          example: 394
        attributeIds:
          type: "array"
          items:
            type: "number"
            example: 450
      example:
        isOpen: true
        description: "Lorem Ipsum"
        name: "Lorem Ipsum"
        startDate: 902
        endDate: 394
        attributeIds:
          - 450
      description: "updateFormValidator (Validator)"
    addOrganizerValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        permissionsIds:
          type: "array"
          items:
            type: "number"
            example: 378
          required: true
        firstName:
          type: "string"
          example: "Lorem Ipsum"
        lastName:
          type: "string"
          example: "Lorem Ipsum"
        password:
          type: "string"
          example: "Lorem Ipsum"
      example:
        email: "Lorem Ipsum"
        permissionsIds:
          - 378
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
        password: "Lorem Ipsum"
      description: "addOrganizerValidator (Validator)"
    updateOrganizerPermissionsValidator:
      type: "object"
      properties:
        permissionsIds:
          type: "array"
          items:
            type: "number"
            example: 501
          required: true
      example:
        permissionsIds:
          - 501
      description: "updateOrganizerPermissionsValidator (Validator)"
    participantsStoreValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        eventId:
          type: "number"
          example: 41
          required: true
        firstName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        lastName:
          type: "string"
          example: "Lorem Ipsum"
          required: true
      example:
        email: "Lorem Ipsum"
        eventId: 41
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
      description: "participantsStoreValidator (Validator)"
    participantsUpdateValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
        eventId:
          type: "number"
          example: 833
        firstName:
          type: "string"
          example: "Lorem Ipsum"
        lastName:
          type: "string"
          example: "Lorem Ipsum"
      example:
        email: "Lorem Ipsum"
        eventId: 833
        firstName: "Lorem Ipsum"
        lastName: "Lorem Ipsum"
      description: "participantsUpdateValidator (Validator)"
    createPermissionValidator:
      type: "object"
      properties:
        action:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        subject:
          type: "string"
          example: "Lorem Ipsum"
          required: true
      example:
        action: "Lorem Ipsum"
        subject: "Lorem Ipsum"
      description: "createPermissionValidator (Validator)"
    updatePermissionValidator:
      type: "object"
      properties:
        action:
          type: "string"
          example: "Lorem Ipsum"
        subject:
          type: "string"
          example: "Lorem Ipsum"
      example:
        action: "Lorem Ipsum"
        subject: "Lorem Ipsum"
      description: "updatePermissionValidator (Validator)"
paths:
  /api/v1/events/{eventId}/forms:
    get:
      summary: "Get a list of forms (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/forms_controller.ts_ - **index**"
      operationId: "getForms"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Form"
              example:
                - id: 578
                  eventId: 569
                  isOpen: true
                  description: "Lorem ipsum dolor sit amet"
                  name: "John Doe"
                  slug: "Lorem Ipsum"
                  startDate: "2021-03-23T16:13:08.489+01:00"
                  endDate: "2021-03-23T16:13:08.489+01:00"
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: " (store)"
      description: "Creates a form for the specified event\n\n _app/controllers/forms_controller.ts_ - **store**"
      operationId: "createForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createFormValidator"
            example:
              isOpen: true
              description: "Lorem Ipsum"
              name: "Lorem Ipsum"
              startDate: 858
              endDate: 793
              attributeIds:
                - 991
  /api/v1/events/{eventId}/forms/{id}:
    get:
      summary: "Get a single instance of forms (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/forms_controller.ts_ - **show**"
      operationId: "getForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
              example:
                id: 578
                eventId: 569
                isOpen: true
                description: "Lorem ipsum dolor sit amet"
                name: "John Doe"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
        404:
          content:
            text/plain:
              example: '{ message: "Row not found", "name": "Exception", status: 404},'
          description: "Returns **404** (Not Found) as **text/plain**"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update forms (update)"
      description: "Updates form details\n\n _app/controllers/forms_controller.ts_ - **update**"
      operationId: "updateForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Form"
              example:
                id: 578
                eventId: 569
                isOpen: true
                description: "Lorem ipsum dolor sit amet"
                name: "John Doe"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateFormValidator"
            example:
              isOpen: true
              description: "Lorem Ipsum"
              name: "Lorem Ipsum"
              startDate: 902
              endDate: 394
              attributeIds:
                - 450
    delete:
      summary: "Delete forms (destroy)"
      description: "Deletes a form\n\n _app/controllers/forms_controller.ts_ - **destroy**"
      operationId: "deleteForm"
      parameters:
        - in: "path"
          name: "eventId"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "FORMS"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
        404:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message: "Row not found"
                  name: "Exception"
                  status: 404
              example:
                message: "Row not found"
                name: "Exception"
                status: 404
          description: "Returns **404** (Not Found) as **application/json**"
      security:
        - BearerAuth:
            - "access"
  /api/v1/events:
    get:
      summary: "Get a list of event (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/events_controller.ts_ - **index**"
      operationId: "getEvents"
      parameters: []
      tags:
        - "EVENT"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Event"
              example:
                - id: 694
                  organizerId: 748
                  name: "John Doe"
                  description: "Lorem ipsum dolor sit amet"
                  slug: "Lorem Ipsum"
                  startDate: "2021-03-23T16:13:08.489+01:00"
                  endDate: "2021-03-23T16:13:08.489+01:00"
                  firstFormId: 282
                  lat: 41.705
                  long: -87.475
                  primaryColor: "Lorem Ipsum"
                  organizer: "Lorem Ipsum"
                  participantsCount: 300
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: " (store)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/events_controller.ts_ - **store**"
      operationId: "createEvent"
      parameters: []
      tags:
        - "EVENT"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 694
                organizerId: 748
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                firstFormId: 282
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 300
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **201** (Created) as **application/json**"
        400:
          content:
            text/plain:
              example: "Invalid input data"
          description: "Returns **400** (Bad Request) as **text/plain**"
        401:
          content:
            text/plain:
              example: "Unauthorized access"
          description: "Returns **401** (Unauthorized) as **text/plain**"
        403:
          description: "Returns **403** (Forbidden)"
        422:
          content:
            text/plain:
              example: "Validation failed"
          description: "Returns **422** (Unprocessable Entity) as **text/plain**"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createEventValidator"
            example:
              name: "Lorem Ipsum"
              description: "Lorem Ipsum"
              organizer: "Lorem Ipsum"
              slug: "Lorem Ipsum"
              startDate: 569
              endDate: 950
              firstFormId: 680
              lat: 812
              long: 649
              primaryColor: "Lorem Ipsum"
              participantsCount: 871
  /api/v1/events/{id}:
    get:
      summary: "Get a single instance of event (show)"
      description: "Shows one event with logged user permission\n\n _app/controllers/events_controller.ts_ - **show**"
      operationId: "showEvent"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "EVENT"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 694
                organizerId: 748
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                firstFormId: 282
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 300
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
                permissions:
                  - id: 882
                    action: "Lorem Ipsum"
                    subject: "Lorem Ipsum"
          description: "Returns **201** (Created) as **application/json**"
        401:
          content:
            text/plain:
              example: "Unauthorized access"
          description: "Returns **401** (Unauthorized) as **text/plain**"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update event (update)"
      description: "Updates an existing event if user has permission. Date should be in format 2025-01-05 12:00:00\n\n _app/controllers/events_controller.ts_ - **update**"
      operationId: "updateEvent"
      parameters:
        - in: "path"
          name: "id"
          description: "Event identifier"
          schema:
            example: ""
            type: "number"
          required: true
      tags:
        - "EVENT"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
              example:
                id: 694
                organizerId: 748
                name: "John Doe"
                description: "Lorem ipsum dolor sit amet"
                slug: "Lorem Ipsum"
                startDate: "2021-03-23T16:13:08.489+01:00"
                endDate: "2021-03-23T16:13:08.489+01:00"
                firstFormId: 282
                lat: 41.705
                long: -87.475
                primaryColor: "Lorem Ipsum"
                organizer: "Lorem Ipsum"
                participantsCount: 300
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            text/plain:
              example: "Invalid input data"
          description: "Returns **400** (Bad Request) as **text/plain**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          content:
            text/plain:
              example: "Not authorized to update this event"
          description: "Returns **403** (Forbidden) as **text/plain**"
        404:
          content:
            text/plain:
              example: "Event not found"
          description: "Returns **404** (Not Found) as **text/plain**"
        422:
          content:
            text/plain:
              example: "Validation failed"
          description: "Returns **422** (Unprocessable Entity) as **text/plain**"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateEventValidator"
            example:
              name: "Lorem Ipsum"
              description: "Lorem Ipsum"
              slug: "Lorem Ipsum"
              startDate: 646
              endDate: 256
              lat: 926
              long: 434
              primaryColor: "Lorem Ipsum"
              participantsCount: 954
              organizer: "Lorem Ipsum"
    delete:
      summary: "Delete event (destroy)"
      description: "Deletes an event if user has permission\n\n _app/controllers/events_controller.ts_ - **destroy**"
      operationId: "deleteEvent"
      parameters:
        - in: "path"
          name: "id"
          description: "Event identifier"
          schema:
            example: ""
            type: "number"
          required: true
      tags:
        - "EVENT"
      responses:
        204:
          content:
            application/json:
              schema:
                type: "object"
                properties: {}
              example: {}
          description: "Returns **204** (No Content) as **application/json**"
        401:
          content:
            text/plain:
              example: "You don't have permissions to this actions"
          description: "Returns **401** (Unauthorized) as **text/plain**"
        403:
          description: "Returns **403** (Forbidden)"
        404:
          content:
            text/plain:
              example: "Event not found"
          description: "Returns **404** (Not Found) as **text/plain**"
      security:
        - BearerAuth:
            - "access"
  /api/v1/auth/login:
    post:
      summary: " (login)"
      description: "Enables login. Default method is token authorization. Support rememberMe functionality. If rememberMe is set to true then token expires in 30 days, otherwise in 24h.\n\n _app/controllers/auth_controller.ts_ - **login**"
      operationId: "loginAdmin"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  admin:
                    $ref: "#/components/schemas/Admin"
                  token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
              example:
                admin:
                  id: 973
                  firstName: "John"
                  lastName: "Doe"
                  email: "johndoe@example.com"
                  type: {}
                  active: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
                token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Invalid user credentials"
              example:
                errors:
                  - message: "Invalid user credentials"
          description: "Returns **400** (Bad Request) as **application/json**"
        422:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Password field is required"
                          field: "password"
              example:
                errors:
                  - message: "Password field is required"
                    field: "password"
          description: "Returns **422** (Unprocessable Entity) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginValidator"
            example:
              email: "Lorem Ipsum"
              password: "Lorem Ipsum"
              rememberMe: true
  /api/v1/auth/register:
    post:
      summary: " (register)"
      description: "Enables registration of admin. After registration admin is logged in and bearer token is generated.\n\n _app/controllers/auth_controller.ts_ - **register**"
      operationId: "registerAdmin"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  admin:
                    $ref: "#/components/schemas/Admin"
                  token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
              example:
                admin:
                  id: 973
                  firstName: "John"
                  lastName: "Doe"
                  email: "johndoe@example.com"
                  type: {}
                  active: true
                  createdAt: "2021-03-23T16:13:08.489+01:00"
                  updatedAt: "2021-03-23T16:13:08.489+01:00"
                token: "oat_Mw.YUxCZHV2Y0ZjNzJKcU5LejV0Q241V0JDUm83QlspsRENDZU9qT"
          description: "Returns **200** (OK) as **application/json**"
        422:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "First name field is required"
                          field: "firstName"
              example:
                errors:
                  - message: "First name field is required"
                    field: "firstName"
          description: "Returns **422** (Unprocessable Entity) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerAdminValidator"
            example:
              email: "Lorem Ipsum"
              password: "Lorem Ipsum"
              firstName: "Lorem Ipsum"
              lastName: "Lorem Ipsum"
  /api/v1/auth/me:
    get:
      summary: " (me)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/auth_controller.ts_ - **me**"
      operationId: "authenticatedAdmin"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
              example:
                id: 973
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                type: {}
                active: true
                createdAt: "2021-03-23T16:13:08.489+01:00"
                updatedAt: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
        400:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  errors:
                    type: "object"
                    properties:
                      0:
                        type: "object"
                        properties:
                          message: "Unauthorized access"
              example:
                errors:
                  - message: "Unauthorized access"
          description: "Returns **400** (Bad Request) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
tags:
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "FORMS"
    description: "Everything related to FORMS"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "EVENT"
    description: "Everything related to EVENT"
  - name: "AUTH"
    description: "Everything related to AUTH"
  - name: "AUTH"
    description: "Everything related to AUTH"
  - name: "AUTH"
    description: "Everything related to AUTH"
